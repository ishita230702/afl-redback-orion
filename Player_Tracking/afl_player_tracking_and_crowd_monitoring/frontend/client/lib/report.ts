export const convertBackendDataToText = (data: any) => {
  return `AFL VIDEO ANALYSIS REPORT
Generated: ${new Date(data.timestamp).toLocaleString()}
Analysis ID: ${data.analysisId}

VIDEO INFORMATION
================
File: ${data.videoFile.name}
Duration: ${data.videoFile.duration}
Size: ${data.videoFile.size}
Resolution: ${data.videoFile.resolution}
Processing Time: ${data.processingTime} seconds

PLAYER PERFORMANCE
==================
${data.results.playerPerformance
  .map(
    (player: any) => `
${player.name} (${player.team} - ${player.position})
- Max Speed: ${player.statistics.speed.max} ${player.statistics.speed.unit}
- Average Speed: ${player.statistics.speed.average} ${player.statistics.speed.unit}
- Total Distance: ${player.statistics.distance.total} ${player.statistics.distance.unit}
- Goals: ${player.statistics.goals} | Assists: ${player.statistics.assists}
- Tackles: ${player.statistics.tackles} | Marks: ${player.statistics.marks}
- Disposals: ${player.statistics.disposals} | Efficiency: ${player.statistics.touches.efficiency}%
- Time on Ground: ${player.statistics.timeOnGround}%
`,
  )
  .join("\n")}

CROWD ANALYSIS
==============
Total Attendance: ${data.results.crowdAnalysis.totalAttendance.toLocaleString()}
Stadium Utilization: ${data.results.crowdAnalysis.utilizationRate}%

${data.results.crowdAnalysis.sections
  .map(
    (section: any) => `
${section.name}: ${section.attendance.toLocaleString()} / ${section.capacity.toLocaleString()} (${section.density}%)
Peak Noise: ${section.noiseLevel.peak} ${section.noiseLevel.unit}
`,
  )
  .join("")}

HIGHLIGHTS
==========
${data.results.highlights
  .map(
    (highlight: any) =>
      `${highlight.timestamp} - ${highlight.type.toUpperCase()}: ${highlight.description} (${Math.round(
        highlight.confidence * 100,
      )}% confidence)`,
  )
  .join("\n")}

TECHNICAL METADATA
==================
Overall Confidence: ${Math.round(data.results.metadata.confidence * 100)}%
Quality Score: ${data.results.metadata.qualityScore}/10
Processing Version: ${data.results.metadata.processingVersion}

Report generated by AFL Analytics Platform
`;
};

export const convertBackendDataToHTML = (data: any) => {
  return `
      <div class="section">
        <h1>AFL Video Analysis Report</h1>
        <div class="metric">
          <strong>Generated:</strong> ${new Date(data.timestamp).toLocaleString()}<br>
          <strong>Analysis ID:</strong> ${data.analysisId}<br>
          <strong>Video File:</strong> ${data.videoFile.name}<br>
          <strong>Duration:</strong> ${data.videoFile.duration}<br>
          <strong>Processing Time:</strong> ${data.processingTime} seconds
        </div>
      </div>

      <div class="section">
        <h2>Player Performance Analysis</h2>
        <div class="player-grid">
          ${data.results.playerPerformance
            .map(
              (player: any) => `
            <div class="player-card">
              <h3 style="margin: 0 0 8px 0; color: #059669;">${player.name}</h3>
              <div class="player-team">${player.team} - ${player.position}</div>
              <div><strong>Max Speed:</strong> ${player.statistics.speed.max} ${player.statistics.speed.unit}</div>
              <div><strong>Distance:</strong> ${player.statistics.distance.total} ${player.statistics.distance.unit}</div>
              <div><strong>Goals:</strong> ${player.statistics.goals} | <strong>Assists:</strong> ${player.statistics.assists}</div>
              <div><strong>Efficiency:</strong> ${player.statistics.touches.efficiency}%</div>
            </div>
          `,
            )
            .join("")}
        </div>
      </div>

      <div class="section">
        <h2>Crowd Analysis</h2>
        <div class="metric">
          <strong>Total Attendance:</strong> ${data.results.crowdAnalysis.totalAttendance.toLocaleString()}<br>
          <strong>Utilization Rate:</strong> ${data.results.crowdAnalysis.utilizationRate}%
        </div>
        ${data.results.crowdAnalysis.sections
          .map(
            (section: any) => `
          <div class="crowd-item">
            <strong>${section.name}:</strong> ${section.attendance.toLocaleString()} / ${section.capacity.toLocaleString()} (${section.density}%)<br>
            Peak Noise: ${section.noiseLevel.peak} ${section.noiseLevel.unit}
          </div>
        `,
          )
          .join("")}
      </div>

      <div class="section">
        <h2>Technical Information</h2>
        <div class="metric">
          <strong>Analysis Confidence:</strong> ${Math.round(data.results.metadata.confidence * 100)}%<br>
          <strong>Quality Score:</strong> ${data.results.metadata.qualityScore}/10<br>
          <strong>Processing Version:</strong> ${data.results.metadata.processingVersion}
        </div>
      </div>
    `;
};

export const generateDashboardPDF = (content: string) => {
  const printWindow = window.open("", "_blank");
  if (!printWindow) {
    alert("Please allow popups to generate PDF reports");
    return;
  }
  const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>AFL Analytics Dashboard Report</title>
          <style>
            body { font-family: 'Segoe UI', sans-serif; margin: 40px; line-height: 1.6; color: #333; }
            .header { text-align: center; border-bottom: 3px solid #059669; padding-bottom: 20px; margin-bottom: 30px; }
            .logo { color: #059669; font-size: 28px; font-weight: bold; margin-bottom: 5px; }
            .subtitle { color: #666; font-size: 14px; }
            h1 { color: #059669; font-size: 24px; margin: 30px 0 15px 0; }
            h2 { color: #2563eb; font-size: 18px; margin: 25px 0 10px 0; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px; }
            .metric { background: #f0fdf4; padding: 10px; margin: 8px 0; border-left: 4px solid #059669; }
            .section { margin-bottom: 25px; }
            .player-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 15px 0; }
            .player-card { background: #f9fafb; padding: 12px; border-radius: 6px; border: 1px solid #e5e7eb; }
            .crowd-item { background: #ecfdf5; padding: 8px; margin: 4px 0; border-radius: 4px; }
            @media print { body { margin: 20px; } .no-print { display: none; } }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="logo">AFL Analytics Dashboard</div>
            <div class="subtitle">Professional Sports Analytics Platform</div>
          </div>
          <div class="no-print" style="text-align: center; margin-bottom: 20px;">
            <button onclick="window.print()" style="background: #059669; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">Generate PDF</button>
            <button onclick="window.close()" style="background: #6b7280; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin-left: 10px;">Close</button>
          </div>
          ${content}
        </body>
      </html>
    `;
  printWindow.document.write(htmlContent);
  printWindow.document.close();
  setTimeout(() => printWindow.print(), 500);
};

export const generateDashboardInsights = () => {
  const players = [
    "Marcus Bontempelli",
    "Patrick Cripps",
    "Clayton Oliver",
    "Lachie Neale",
    "Dustin Martin",
    "Jeremy Cameron",
    "Tom Hawkins",
    "Charlie Curnow",
    "Jack Steele",
    "Andrew Brayshaw",
    "Christian Petracca",
    "Max Gawn",
  ];
  const stadiumSections = [
    "MCC Members",
    "AFL Members",
    "Southern Stand",
    "Olympic Stand",
    "Ponsford Stand",
    "Great Southern Stand",
    "Premium Seating",
    "General Admission",
  ];
  const playerStats = players.slice(0, 6).map((player) => ({
    name: player,
    speed: (25 + Math.random() * 10).toFixed(1),
    goals: Math.floor(Math.random() * 4),
    tackles: Math.floor(Math.random() * 12 + 3),
    assists: Math.floor(Math.random() * 6),
    disposals: Math.floor(Math.random() * 25 + 12),
    marks: Math.floor(Math.random() * 10 + 2),
    efficiency: (65 + Math.random() * 30).toFixed(1),
    timeOnGround: Math.floor(Math.random() * 25 + 70),
  }));
  const crowdDensity = stadiumSections.slice(0, 6).map((section) => ({
    section,
    capacity: Math.floor(Math.random() * 6000 + 2000),
    attendance: Math.floor(Math.random() * 5500 + 1800),
    density: (75 + Math.random() * 20).toFixed(1),
    avgMovement: (6 + Math.random() * 12).toFixed(1),
    noiseLevel: (65 + Math.random() * 25).toFixed(1),
    peakMoments: Math.floor(Math.random() * 6 + 2),
  }));
  return { playerStats, crowdDensity };
};

export const buildPlayerPerformanceReportHTML = (args: any) => {
  const { selectedPlayer, comparisonPlayer, comparisonData } = args || {};
  const now = new Date().toLocaleString();
  return `
    <div class="section">
      <h1>Player Performance Report</h1>
      <div class="metric">
        <strong>Generated:</strong> ${now}<br>
        <strong>Primary Player:</strong> ${selectedPlayer?.name || "N/A"}<br>
        <strong>Comparison:</strong> ${comparisonPlayer?.name || "N/A"}
      </div>
      <div class="section">
        <h2>Snapshot</h2>
        <div class="player-grid">
          ${[selectedPlayer, comparisonPlayer]
            .filter(Boolean)
            .map((p: any) => `
              <div class="player-card">
                <h3 style="margin:0 0 8px 0;color:#059669;">${p.name}</h3>
                <div class="player-team">${p.team} - ${p.position}</div>
                <div><strong>Kicks:</strong> ${p.kicks}</div>
                <div><strong>Handballs:</strong> ${p.handballs}</div>
                <div><strong>Marks:</strong> ${p.marks}</div>
                <div><strong>Tackles:</strong> ${p.tackles}</div>
                <div><strong>Goals:</strong> ${p.goals}</div>
                <div><strong>Efficiency:</strong> ${p.efficiency}%</div>
              </div>
            `)
            .join("")}
        </div>
      </div>

      <div class="section">
        <h2>Comparison Table</h2>
        <div class="metric">
          ${comparisonData
            ?.map(
              (row: any) => `
              <div style="display:flex;gap:12px;justify-content:space-between;border-bottom:1px solid #e5e7eb;padding:6px 0;">
                <div style="width:160px"><strong>${row.stat}</strong></div>
                <div>${selectedPlayer?.name}: ${row[selectedPlayer?.name]}</div>
                <div>${comparisonPlayer?.name}: ${row[comparisonPlayer?.name]}</div>
              </div>`,
            )
            .join("") || "No comparison data"}
        </div>
      </div>
    `;
};

export const buildTeamPerformanceReportHTML = (args: any) => {
  const { teamA, teamB, teamCompare, summary, matches } = args || {};
  const now = new Date().toLocaleString();
  const a = teamCompare?.a || {}; const b = teamCompare?.b || {};
  return `
    <div class="section">
      <h1>Team Performance Report</h1>
      <div class="metric">
        <strong>Generated:</strong> ${now}<br>
        <strong>Teams:</strong> ${teamA || "All"} vs ${teamB || "All"}
      </div>
    </div>
    <div class="section">
      <h2>Summary</h2>
      <div class="metric">
        Matches: ${summary?.games || 0} • Goals: ${summary?.goals || 0} • Disposals: ${(summary?.disposals || 0).toLocaleString()} • Inside 50s: ${summary?.inside50 || 0}
      </div>
    </div>
    <div class="section">
      <h2>Totals</h2>
      <div class="metric">
        <div><strong>${teamA} Goals:</strong> ${a.goals || 0} • <strong>${teamB} Goals:</strong> ${b.goals || 0}</div>
        <div><strong>${teamA} Disposals:</strong> ${(a.disposals || 0).toLocaleString()} • <strong>${teamB} Disposals:</strong> ${(b.disposals || 0).toLocaleString()}</div>
        <div><strong>${teamA} Marks:</strong> ${a.marks || 0} • <strong>${teamB} Marks:</strong> ${b.marks || 0}</div>
        <div><strong>${teamA} Tackles:</strong> ${a.tackles || 0} • <strong>${teamB} Tackles:</strong> ${b.tackles || 0}</div>
        <div><strong>${teamA} Efficiency:</strong> ${teamCompare?.aEff || 0}% • <strong>${teamB} Efficiency:</strong> ${teamCompare?.bEff || 0}%</div>
      </div>
    </div>
    <div class="section">
      <h2>Matches</h2>
      ${matches
        ?.map(
          (m: any) => `
          <div class="metric">
            <strong>${m.teams.home} vs ${m.teams.away}</strong> • ${m.venue} • ${new Date(m.date).toLocaleDateString()}<br>
            Score: ${m.stats.home.goals * 6 + m.stats.home.behinds} - ${m.stats.away.goals * 6 + m.stats.away.behinds}
          </div>`,
        )
        .join("") || "No matches"}
    </div>
  `;
};

const renderTimelineSVG = (timeline: any[] = []) => {
  if (!timeline.length) return "";
  const width = 600;
  const height = 180;
  const padding = 30;
  const maxAttendance = Math.max(...timeline.map((t: any) => t.attendance), 1);
  const xStep = (width - padding * 2) / Math.max(timeline.length - 1, 1);
  const points = timeline
    .map((t: any, i: number) => {
      const x = padding + i * xStep;
      const y = height - padding - (t.attendance / maxAttendance) * (height - padding * 2);
      return `${x},${y}`;
    })
    .join(" ");
  const axis = `
    <line x1="${padding}" y1="${height - padding}" x2="${width - padding}" y2="${height - padding}" stroke="#9CA3AF" stroke-width="1" />
    <line x1="${padding}" y1="${padding}" x2="${padding}" y2="${height - padding}" stroke="#9CA3AF" stroke-width="1" />
  `;
  const labels = timeline
    .map((t: any, i: number) => {
      const x = padding + i * xStep;
      const y = height - padding + 14;
      return `<text x="${x}" y="${y}" font-size="10" text-anchor="middle" fill="#6B7280">${t.time}</text>`;
    })
    .join("");
  return `
  <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Timeline attendance chart">
    ${axis}
    <polyline fill="none" stroke="#2563eb" stroke-width="2" points="${points}" />
  ${labels}
  </svg>`;
};

export const buildCrowdMonitorReportHTML = (args: any) => {
  const { zones, timeline, includeTimeline = true } = args || {};
  const now = new Date().toLocaleString();
  const totalAttendance = zones?.reduce((s: number, z: any) => s + z.current, 0) || 0;
  const totalCapacity = zones?.reduce((s: number, z: any) => s + z.capacity, 0) || 0;
  const timelineSVG = includeTimeline ? renderTimelineSVG(timeline) : "";
  return `
    <div class="section">
      <h1>Crowd Monitor Report</h1>
      <div class="metric">
        <strong>Generated:</strong> ${now}<br>
        <strong>Total Attendance:</strong> ${totalAttendance.toLocaleString()} / ${totalCapacity.toLocaleString()}
      </div>
    </div>
    <div class="section">
      <h2>Zones</h2>
      ${zones
        ?.map(
          (z: any) => `
          <div class="crowd-item">
            <strong>${z.zone}:</strong> ${z.current.toLocaleString()} / ${z.capacity.toLocaleString()} (${z.density}%) • Trend: ${z.trend}
          </div>`,
        )
        .join("") || "No zones"}
    </div>
    ${includeTimeline ? `<div class="section">
      <h2>Timeline Chart</h2>
      <div class="metric" style="overflow:hidden">${timelineSVG}</div>
    </div>` : ""}
    <div class="section">
      <h2>Timeline Details</h2>
      ${timeline
        ?.map(
          (t: any) => `
          <div class="metric">${t.time}: Attendance ${t.attendance.toLocaleString()} • Density ${t.density}% • Critical ${t.critical} • High ${t.high}</div>`,
        )
        .join("") || "No timeline"}
    </div>
  `;
};
